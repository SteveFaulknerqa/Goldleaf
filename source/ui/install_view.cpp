#include "ui/install_view.hpp"

#include <memory>
#include <libpng16/png.h>
#include "ui/framework/canvas.hpp"
#include "ui/framework/box_element.hpp"
#include "ui/framework/list_element.hpp"
#include "ui/framework/text_element.hpp"
#include "ui/framework/font_renderer.hpp"
#include "data/byte_buffer.hpp"
#include "data/byte_stream.hpp"

#include "error.hpp"

namespace tin::ui
{
    unsigned char testPng[3118] = 
    {
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
        0x00, 0x00, 0x01, 0x2C, 0x00, 0x00, 0x01, 0x2C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x79, 0x7D, 0x8E,
        0x75, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
        0x00, 0x06, 0x62, 0x4B, 0x47, 0x44, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xA0, 0xBD, 0xA7, 0x93,
        0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13,
        0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4D, 0x45, 0x07, 0xD9, 0x07,
        0x18, 0x0B, 0x06, 0x0A, 0x64, 0xB2, 0xE5, 0x5E, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74,
        0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
        0x77, 0x69, 0x74, 0x68, 0x20, 0x47, 0x49, 0x4D, 0x50, 0x57, 0x81, 0x0E, 0x17, 0x00, 0x00, 0x0B,
        0x89, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xED, 0xDD, 0x7F, 0xAC, 0xD5, 0xF5, 0x7D, 0xC7, 0xF1,
        0xD7, 0xF7, 0xFE, 0xE0, 0x72, 0xE1, 0x6A, 0xE5, 0xD6, 0xAB, 0x08, 0x08, 0x94, 0x1F, 0x0E, 0xA5,
        0x0D, 0x49, 0x6B, 0x98, 0x6D, 0x6C, 0x8D, 0x31, 0x9A, 0xA2, 0x5D, 0x33, 0xE9, 0xA4, 0x04, 0xE9,
        0x1A, 0xEE, 0x44, 0x92, 0x99, 0xB8, 0xAA, 0xB4, 0x5B, 0x75, 0x9D, 0xC1, 0x75, 0x2E, 0x14, 0xDD,
        0x16, 0x5A, 0x9B, 0xA8, 0x1B, 0xB6, 0x69, 0x46, 0x15, 0xC5, 0xB6, 0xA4, 0xAD, 0x2D, 0x30, 0x07,
        0x68, 0x5D, 0x67, 0xB0, 0xE8, 0x88, 0x95, 0x0A, 0xC8, 0x50, 0xA0, 0x2A, 0x14, 0x29, 0xA2, 0x97,
        0x5F, 0xF7, 0x9E, 0xFD, 0x71, 0x49, 0x3A, 0x9D, 0x2B, 0x0A, 0xF7, 0xC7, 0xF9, 0xDE, 0xF3, 0x78,
        0x24, 0xFC, 0x47, 0x2E, 0xE7, 0xBE, 0xDF, 0x5F, 0x9E, 0xE7, 0x73, 0x2E, 0x5F, 0xCE, 0x29, 0x2A,
        0x95, 0x4A, 0x00, 0xCA, 0xA0, 0xCE, 0x08, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04,
        0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00,
        0x04, 0x0B, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0,
        0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xDE, 0xAE, 0xA1,
        0xA7, 0xBE, 0xD0, 0xA6, 0x96, 0x16, 0x1F, 0x70, 0x78, 0xCC, 0xA4, 0x03, 0x07, 0x0A, 0x53, 0x00,
        0x27, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1,
        0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40,
        0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x80, 0x81, 0xA5, 0xA1, 0x9A, 0x1F, 0xDC, 0xEC, 0xAC, 0x2F,
        0xE7, 0x54, 0x5B, 0x36, 0x79, 0x33, 0x43, 0xFA, 0xCC, 0xFA, 0x03, 0x93, 0x6A, 0xE6, 0x0D, 0x23,
        0x9D, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1,
        0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x00,
        0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C,
        0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x80, 0x5E, 0xD7, 0x60,
        0x04, 0xF4, 0x95, 0xA2, 0xA8, 0x64, 0x70, 0xF3, 0xA1, 0x0C, 0x3B, 0xFD, 0xB5, 0x0C, 0x1F, 0xF1,
        0x6A, 0x46, 0x8C, 0xDE, 0x95, 0x51, 0x63, 0x77, 0x65, 0xC4, 0xE8, 0x5D, 0x19, 0x3E, 0xF2, 0x95,
        0x9C, 0x7E, 0xC6, 0x6F, 0x72, 0x5A, 0xEB, 0xFE, 0x34, 0x0F, 0xED, 0x48, 0x7D, 0x7D, 0x67, 0x3A,
        0x3B, 0xEB, 0xD3, 0xF1, 0x46, 0x73, 0xF6, 0xED, 0x3D, 0x35, 0x7B, 0x5E, 0x7D, 0x7F, 0x5E, 0xDE,
        0x79, 0x66, 0x76, 0xBD, 0x38, 0x22, 0x3B, 0xFE, 0x7B, 0x44, 0x76, 0xBD, 0x38, 0x22, 0x2F, 0xEF,
        0x3A, 0x23, 0xAF, 0xED, 0x19, 0x96, 0x83, 0x1D, 0x4D, 0xA9, 0x54, 0x0A, 0x03, 0x16, 0x2C, 0x38,
        0x71, 0xCD, 0x43, 0x0E, 0x66, 0xCC, 0xF8, 0x17, 0x33, 0x65, 0xEA, 0xC6, 0x7C, 0xFC, 0xD2, 0x27,
        0x72, 0xC1, 0x45, 0x4F, 0xBE, 0xB7, 0xE3, 0x7F, 0x5D, 0x57, 0x1A, 0x4F, 0x3B, 0x92, 0x53, 0x4F,
        0xDB, 0x9F, 0xD1, 0xE3, 0x76, 0xFC, 0xDE, 0xDF, 0xFB, 0xF3, 0xB5, 0x53, 0xF3, 0xD8, 0xAA, 0x8F,
        0xE5, 0x99, 0x27, 0x3F, 0x94, 0xED, 0x5B, 0x47, 0xA7, 0xE3, 0xCD, 0xC1, 0x16, 0x30, 0x10, 0x9F,
        0xF4, 0x2A, 0x95, 0x4A, 0x8F, 0x7C, 0xA1, 0x4D, 0x2D, 0x2D, 0x95, 0x9E, 0x7E, 0x70, 0xB3, 0xB3,
        0xDE, 0x86, 0xCA, 0xF4, 0xF3, 0x85, 0xFA, 0xAE, 0x8C, 0x19, 0xF7, 0x52, 0x3E, 0x7E, 0xE9, 0x13,
        0xB9, 0x6A, 0xCE, 0xC3, 0x39, 0x6B, 0xD4, 0xCB, 0xFD, 0xF6, 0x58, 0x7E, 0xBD, 0x63, 0x78, 0x1E,
        0xBC, 0x6F, 0x7A, 0x1E, 0x5B, 0xF5, 0xB1, 0x6C, 0x7F, 0xE1, 0xEC, 0x74, 0x75, 0x0E, 0xDC, 0x9F,
        0x7E, 0xAC, 0x3F, 0x30, 0xA9, 0x66, 0x8E, 0x97, 0x82, 0xC5, 0xC9, 0x45, 0xAA, 0xAE, 0x2B, 0x13,
        0xCE, 0x7D, 0x21, 0x9F, 0x9E, 0xF9, 0xA3, 0xCC, 0xBC, 0xE6, 0xA1, 0xAA, 0x7D, 0x9C, 0xF7, 0xFF,
        0xF3, 0x9F, 0x64, 0xC5, 0xFD, 0x57, 0x64, 0xCB, 0x73, 0xE3, 0xD2, 0xD5, 0x35, 0xB0, 0xE2, 0x25,
        0x58, 0x82, 0xC5, 0x71, 0xB4, 0xB6, 0xED, 0xCD, 0xE5, 0x9F, 0x59, 0x99, 0x2F, 0xDC, 0x7A, 0x57,
        0xE9, 0x1E, 0xFB, 0x3F, 0x2D, 0xB8, 0x2E, 0x3F, 0x5E, 0x7E, 0x59, 0xF6, 0xEE, 0x6E, 0x15, 0x2C,
        0xC1, 0x12, 0xAC, 0x81, 0xEC, 0x9C, 0xC9, 0x5B, 0x32, 0x6F, 0xFE, 0xBF, 0xE4, 0xA2, 0x4F, 0x3E,
        0x5E, 0xFA, 0xEF, 0x65, 0xED, 0x4F, 0x2E, 0xCC, 0xDD, 0x77, 0xFC, 0x59, 0x9E, 0x7F, 0x76, 0x82,
        0x60, 0x09, 0x96, 0x60, 0x0D, 0x24, 0x1F, 0xFA, 0xC8, 0xB3, 0xF9, 0xEB, 0x3B, 0xBE, 0x96, 0xF1,
        0x93, 0x5E, 0x18, 0x70, 0xDF, 0xDB, 0xD6, 0x4D, 0xE3, 0xF2, 0xD5, 0xF9, 0x5F, 0xCA, 0xC6, 0xA7,
        0x26, 0x0B, 0x96, 0x60, 0x09, 0x56, 0xB9, 0x4F, 0x54, 0x9B, 0xB3, 0x60, 0xF1, 0xDF, 0x65, 0xE2,
        0x79, 0x5B, 0x07, 0xFC, 0xF7, 0xBA, 0xF9, 0x97, 0xE3, 0x73, 0xEB, 0xF5, 0xB7, 0xE4, 0xF9, 0x67,
        0x27, 0x0A, 0x56, 0x95, 0x72, 0xE3, 0x28, 0xEF, 0xA8, 0x6D, 0xF8, 0x9E, 0x2C, 0xBC, 0xF7, 0x2B,
        0x59, 0xBA, 0xBA, 0xBD, 0x26, 0x62, 0x95, 0x24, 0x13, 0xCF, 0xDB, 0x9A, 0xA5, 0xAB, 0xDB, 0xB3,
        0xF0, 0xDE, 0xAF, 0xA4, 0x6D, 0xF8, 0x1E, 0x17, 0x81, 0x60, 0x51, 0xED, 0xEA, 0x1B, 0x3A, 0x33,
        0xA3, 0x7D, 0x79, 0x1E, 0xD9, 0x70, 0x65, 0x2E, 0xF9, 0xD4, 0x9A, 0x9A, 0x9C, 0xC1, 0x25, 0x9F,
        0x5A, 0x93, 0x47, 0x36, 0x5C, 0x99, 0x19, 0xED, 0xCB, 0x53, 0xDF, 0xD0, 0xE9, 0xA2, 0xF0, 0x92,
        0xD0, 0x4B, 0xC2, 0x6A, 0xF4, 0x81, 0x89, 0xDB, 0x73, 0xF7, 0xF2, 0xEB, 0xD3, 0xDA, 0xB6, 0xD7,
        0x30, 0x8E, 0xD9, 0xBB, 0xBB, 0x35, 0xF3, 0x3E, 0xB3, 0x38, 0xDB, 0x36, 0x8F, 0xF1, 0x92, 0xD0,
        0x09, 0x8B, 0xAA, 0x78, 0xD6, 0x2A, 0x2A, 0x99, 0xD1, 0xBE, 0x3C, 0x0F, 0xAE, 0x9B, 0x2D, 0x56,
        0x6F, 0xD3, 0xDA, 0xB6, 0x37, 0x0F, 0xAE, 0x9B, 0x9D, 0x19, 0xED, 0xCB, 0x53, 0x14, 0x15, 0x03,
        0x71, 0xC2, 0x72, 0xC2, 0xEA, 0x4F, 0xA7, 0x9E, 0xB6, 0x3F, 0x77, 0xDC, 0x77, 0x73, 0x3E, 0x7C,
        0xC1, 0x33, 0x86, 0x71, 0x1C, 0xBF, 0xF8, 0xF9, 0x94, 0xCC, 0x9F, 0x73, 0x7B, 0xF6, 0xEF, 0x3B,
        0xD5, 0x09, 0xCB, 0x09, 0x8B, 0xBE, 0x76, 0xCE, 0xE4, 0x2D, 0x79, 0xF4, 0xB9, 0x2B, 0xC4, 0xEA,
        0x5D, 0xFA, 0xF0, 0x05, 0xCF, 0xE4, 0xD1, 0xE7, 0xAE, 0xC8, 0x39, 0x93, 0xB7, 0x18, 0x86, 0x60,
        0xD1, 0x97, 0x2E, 0x9E, 0xB6, 0x2E, 0x4B, 0x57, 0xCF, 0x31, 0x88, 0x13, 0xB0, 0x74, 0xF5, 0x9C,
        0x5C, 0x3C, 0x6D, 0x9D, 0x41, 0x08, 0x16, 0x7D, 0x61, 0xD6, 0xDC, 0x65, 0x59, 0xB4, 0xE4, 0x16,
        0x83, 0x38, 0x09, 0x8B, 0x96, 0xDC, 0x92, 0x59, 0x73, 0x97, 0x19, 0x84, 0x60, 0xD1, 0x9B, 0xAE,
        0xFB, 0xF2, 0x3D, 0xB9, 0xF1, 0xB6, 0xAF, 0x1B, 0x44, 0x0F, 0xB8, 0xF1, 0xB6, 0xAF, 0xE7, 0xBA,
        0x2F, 0xDF, 0x63, 0x10, 0x7D, 0xC8, 0xFB, 0x61, 0xD5, 0x88, 0xA2, 0xA8, 0xE4, 0xA6, 0xDB, 0x16,
        0x57, 0xF5, 0x3B, 0x2A, 0x94, 0xD1, 0x9C, 0xEB, 0xBF, 0x93, 0xE6, 0x21, 0x1D, 0xB9, 0xF3, 0x6F,
        0xAE, 0xF7, 0x26, 0x82, 0x4E, 0x58, 0xF4, 0x94, 0x1B, 0x16, 0x7C, 0x43, 0xAC, 0x7A, 0xC9, 0xCC,
        0x6B, 0x1E, 0xCA, 0x0D, 0x0B, 0xBE, 0x61, 0x10, 0x82, 0x45, 0x4F, 0xB8, 0xF6, 0xA6, 0xFB, 0xFC,
        0xBC, 0xA5, 0x97, 0xCD, 0x9A, 0xBB, 0x2C, 0xD7, 0xDE, 0x74, 0x9F, 0x41, 0x08, 0x16, 0x27, 0x63,
        0xFA, 0xEC, 0x15, 0xB9, 0x76, 0xFE, 0x12, 0x83, 0xE8, 0x8B, 0x27, 0x86, 0xF9, 0x4B, 0x32, 0x7D,
        0xF6, 0x0A, 0x83, 0x10, 0x2C, 0x4E, 0xC4, 0xD4, 0x4F, 0xAC, 0xCF, 0xCD, 0x8B, 0x16, 0x19, 0x44,
        0x1F, 0xBA, 0x79, 0xD1, 0xA2, 0x4C, 0xFD, 0x84, 0x1B, 0x9E, 0x05, 0x8B, 0xF7, 0x64, 0xD4, 0xD8,
        0x9D, 0xF9, 0xE6, 0x03, 0x37, 0x18, 0x44, 0x3F, 0xF8, 0xE6, 0x03, 0x37, 0x64, 0xD4, 0xD8, 0x9D,
        0x06, 0xD1, 0x0B, 0xAA, 0xFA, 0xBF, 0xE6, 0x94, 0xD5, 0xA4, 0x03, 0x07, 0xFA, 0xF9, 0x9F, 0x8B,
        0x0E, 0x26, 0xAF, 0x4F, 0xA8, 0x24, 0x87, 0x2C, 0xA3, 0xDF, 0x34, 0x25, 0xA7, 0x6C, 0x29, 0x12,
        0x9F, 0xDE, 0xE3, 0x84, 0xC5, 0x71, 0x7A, 0xF5, 0x97, 0x62, 0xD5, 0xEF, 0x0E, 0x1D, 0xDB, 0x03,
        0x82, 0xC5, 0xFF, 0xEF, 0xE8, 0xCA, 0x4A, 0x8E, 0x2C, 0x35, 0x87, 0x6A, 0x70, 0x64, 0x69, 0xF7,
        0x3E, 0x10, 0x2C, 0xDE, 0x41, 0x65, 0xEF, 0xB5, 0xE9, 0xB8, 0xDA, 0x1C, 0xAA, 0x49, 0xC7, 0xD5,
        0xDD, 0x7B, 0x41, 0xB0, 0xF8, 0x3F, 0x2F, 0x05, 0xEF, 0x36, 0x04, 0x7B, 0x11, 0x2C, 0xAA, 0x5F,
        0xE7, 0x7F, 0x56, 0x72, 0xF4, 0xFB, 0xE6, 0x50, 0x95, 0x2F, 0xD3, 0xBF, 0xDF, 0xBD, 0x1F, 0x04,
        0x8B, 0x24, 0x39, 0x9A, 0xBC, 0x39, 0xDD, 0x18, 0xAA, 0xD9, 0x9B, 0xD3, 0xBB, 0xF7, 0x84, 0x60,
        0xD5, 0xBC, 0x23, 0x0F, 0x57, 0x92, 0xC3, 0xE6, 0x50, 0xD5, 0x0E, 0x1F, 0xDB, 0x13, 0x27, 0xC3,
        0x7D, 0x58, 0xBD, 0xA0, 0x6F, 0xEF, 0xC3, 0x3A, 0x98, 0xBC, 0x7E, 0xB6, 0xD9, 0x97, 0xC5, 0x29,
        0x2F, 0xB9, 0x37, 0xCB, 0x09, 0xAB, 0x96, 0x4F, 0x57, 0xCB, 0xC4, 0xCA, 0xBE, 0x9C, 0xB0, 0x9C,
        0xB0, 0xCA, 0x70, 0xC2, 0x3A, 0x9C, 0xBC, 0x3E, 0xD2, 0xDC, 0x4B, 0x77, 0xCA, 0xDA, 0x59, 0x24,
        0x83, 0xCC, 0xC1, 0x09, 0xAB, 0xC6, 0xB8, 0x29, 0xD1, 0xDE, 0x04, 0x8B, 0xD2, 0x38, 0x78, 0x93,
        0x19, 0xD8, 0x9B, 0x60, 0x51, 0x02, 0x5D, 0xBF, 0xAA, 0xA4, 0xE2, 0x43, 0x4F, 0x4B, 0xA9, 0xB2,
        0xB7, 0x7B, 0x7F, 0x08, 0x56, 0xCD, 0x38, 0xEC, 0x4D, 0xF9, 0xEC, 0x4F, 0xB0, 0x28, 0xC7, 0xD5,
        0x9E, 0x1C, 0x71, 0xC1, 0x97, 0xDA, 0x91, 0x25, 0x71, 0xEF, 0x9C, 0x60, 0xD5, 0x86, 0xCE, 0x67,
        0xBC, 0x9C, 0xB0, 0x47, 0xC1, 0xA2, 0x2C, 0xCF, 0xCE, 0x0F, 0x98, 0x81, 0x3D, 0x0A, 0x16, 0x65,
        0xD0, 0x95, 0x1C, 0xF9, 0xB6, 0x31, 0x0C, 0x88, 0x60, 0x7D, 0xBB, 0x7B, 0x9F, 0x08, 0xD6, 0xC0,
        0xED, 0xD5, 0x4E, 0x2F, 0x23, 0xEC, 0x53, 0xB0, 0x28, 0xCB, 0x05, 0xEE, 0x13, 0x59, 0xEC, 0x53,
        0xB0, 0x28, 0x8B, 0xA3, 0x3F, 0x31, 0x03, 0xFB, 0x14, 0x2C, 0x4A, 0xE2, 0xC8, 0xC3, 0x66, 0x60,
        0x9F, 0x82, 0x45, 0x09, 0x54, 0xDE, 0x30, 0x03, 0x7B, 0x15, 0x2C, 0xCA, 0x72, 0x61, 0xBF, 0xEA,
        0x07, 0xB4, 0xF6, 0x2A, 0x58, 0x94, 0x44, 0xD7, 0x76, 0x33, 0xB0, 0x57, 0xC1, 0xA2, 0x2C, 0xCF,
        0xC4, 0x5B, 0xCD, 0xC0, 0x5E, 0x05, 0x8B, 0xB2, 0x3C, 0x13, 0xBB, 0xB0, 0xED, 0x55, 0xB0, 0x28,
        0xCD, 0x85, 0xBD, 0xCD, 0x0C, 0xEC, 0x55, 0xB0, 0x28, 0xCB, 0x85, 0xBD, 0xD3, 0x0C, 0xEC, 0x55,
        0xB0, 0x28, 0x89, 0xCA, 0x6E, 0x33, 0xB0, 0x57, 0xC1, 0xA2, 0x2C, 0x17, 0xF6, 0x7E, 0x33, 0xB0,
        0x57, 0xC1, 0xA2, 0x2C, 0x7C, 0x72, 0xB0, 0xBD, 0x0A, 0x16, 0xA5, 0xD1, 0x60, 0x04, 0xF6, 0x2A,
        0x58, 0x94, 0x44, 0x71, 0xAA, 0x19, 0xD8, 0xAB, 0x60, 0x51, 0x96, 0x0B, 0xBB, 0xCD, 0x0C, 0xEC,
        0x55, 0xB0, 0x28, 0xCB, 0xB6, 0x46, 0x9A, 0x81, 0xBD, 0x0A, 0x16, 0x65, 0xD9, 0xD6, 0x07, 0xCC,
        0xC0, 0x5E, 0x05, 0x8B, 0xB2, 0x6C, 0x6B, 0xBC, 0x19, 0xD8, 0xAB, 0x60, 0x51, 0x12, 0x85, 0x0B,
        0xDB, 0x5E, 0x05, 0x8B, 0xD2, 0x6C, 0x6B, 0x8C, 0x19, 0xD8, 0xAB, 0x60, 0x51, 0x96, 0x67, 0xE2,
        0x33, 0x0A, 0x43, 0xB0, 0x57, 0xC1, 0xA2, 0x24, 0x17, 0xF6, 0x50, 0x33, 0xB0, 0x57, 0xC1, 0xA2,
        0x44, 0x1A, 0xA7, 0x9B, 0x81, 0x7D, 0x0A, 0x16, 0x25, 0xD1, 0xF0, 0x49, 0x33, 0xB0, 0x4F, 0xC1,
        0xA2, 0x2C, 0x1B, 0x3B, 0xDF, 0x0C, 0xEC, 0x53, 0xB0, 0x28, 0xCB, 0xC6, 0x46, 0xFA, 0x01, 0xAD,
        0x7D, 0x0A, 0x16, 0x25, 0x5A, 0x59, 0xE3, 0xE7, 0x8D, 0x61, 0x20, 0x68, 0xFC, 0xBC, 0xBF, 0x82,
        0x82, 0x55, 0x0B, 0x17, 0xFA, 0x67, 0xCD, 0xC0, 0x1E, 0x05, 0x8B, 0x92, 0xA8, 0x9F, 0xE2, 0x65,
        0x84, 0x3D, 0x0A, 0x16, 0x65, 0x31, 0x28, 0x69, 0x6C, 0x37, 0x86, 0x52, 0x9F, 0xAE, 0xDA, 0xBB,
        0xF7, 0x88, 0x60, 0xD5, 0x46, 0xB3, 0x04, 0xCB, 0xFE, 0x04, 0x8B, 0xD2, 0x6C, 0xEE, 0x0F, 0x8A,
        0x14, 0xAD, 0xE6, 0x50, 0x46, 0x45, 0x6B, 0xF7, 0xFE, 0x10, 0xAC, 0x9A, 0x32, 0xF8, 0x4E, 0x33,
        0xB0, 0x37, 0xC1, 0xA2, 0x24, 0x1A, 0x2E, 0xF3, 0x2C, 0x6D, 0x6F, 0xB5, 0x35, 0xBA, 0x5A, 0xF8,
        0x26, 0x3F, 0xB7, 0xB8, 0xB9, 0x6F, 0xFF, 0xC0, 0x25, 0x6D, 0x95, 0xBE, 0xFA, 0xA3, 0xAE, 0x1C,
        0x97, 0xDC, 0xFC, 0x11, 0x17, 0x72, 0xB9, 0x4E, 0x57, 0x7E, 0xD8, 0xEE, 0x84, 0x55, 0xA3, 0x7E,
        0xBC, 0xDD, 0x0C, 0x4A, 0xA5, 0x71, 0x86, 0xD3, 0x95, 0x60, 0xD5, 0xAE, 0x43, 0x9D, 0xC9, 0xAD,
        0x4F, 0x9A, 0x43, 0x39, 0x4E, 0x57, 0x77, 0x25, 0x19, 0x6C, 0x0E, 0x82, 0x55, 0xDB, 0x7E, 0xFA,
        0x62, 0x72, 0xA4, 0xCB, 0x1C, 0xAA, 0xDB, 0xA0, 0xA4, 0x71, 0xBA, 0xD3, 0x95, 0x60, 0xD1, 0x59,
        0x49, 0xFE, 0x7C, 0xAD, 0x39, 0x54, 0xB5, 0x21, 0x0F, 0xC7, 0x27, 0x3C, 0x0B, 0x16, 0xC7, 0x3C,
        0xBD, 0x27, 0x59, 0xF5, 0x92, 0x39, 0x54, 0xA5, 0x86, 0x3F, 0x4E, 0xEA, 0xFF, 0xD0, 0xE9, 0x4A,
        0xB0, 0xF8, 0xDF, 0x16, 0xFE, 0xC2, 0x0C, 0xAA, 0xD2, 0xE0, 0x85, 0xF3, 0x0C, 0x41, 0xB0, 0x78,
        0x9B, 0xDF, 0x1E, 0x4E, 0x6E, 0x7C, 0xDC, 0x1C, 0xAA, 0x4A, 0xF3, 0xBF, 0x26, 0x45, 0xEB, 0x3D,
        0x06, 0x21, 0x58, 0xBC, 0x83, 0xC7, 0x7E, 0x9D, 0xAC, 0xD8, 0x66, 0x0E, 0x55, 0xA1, 0x71, 0x96,
        0x9B, 0x44, 0x05, 0x8B, 0xE3, 0xF9, 0xDA, 0x86, 0xE4, 0x70, 0xA7, 0x39, 0xF4, 0xAF, 0xA6, 0x64,
        0xF0, 0x42, 0xB1, 0x12, 0x2C, 0x8E, 0xE7, 0x50, 0x67, 0xF2, 0xD9, 0x95, 0xE6, 0xD0, 0xAF, 0x86,
        0x3E, 0x1E, 0xF7, 0x5C, 0x09, 0x16, 0xEF, 0xD2, 0x8E, 0x03, 0xC9, 0x75, 0xEB, 0xCC, 0xA1, 0x5F,
        0x0C, 0x79, 0x28, 0xA9, 0x1B, 0xEB, 0x74, 0x25, 0x58, 0xBC, 0x17, 0x4F, 0xBE, 0x92, 0xDC, 0xFE,
        0x94, 0x39, 0xF4, 0xA9, 0xC1, 0x77, 0x26, 0xF5, 0x17, 0x89, 0x95, 0x60, 0x71, 0x22, 0xBE, 0xF7,
        0x42, 0x72, 0xCF, 0xB3, 0xE6, 0xD0, 0x27, 0x9A, 0xBE, 0x94, 0x34, 0xFE, 0xA9, 0x58, 0x09, 0x16,
        0x27, 0xE3, 0xDE, 0x5F, 0x26, 0xDF, 0xDD, 0x6C, 0x0E, 0xBD, 0x6A, 0xD0, 0xBC, 0x64, 0xD0, 0x17,
        0xC5, 0x4A, 0xB0, 0xE8, 0x09, 0xFF, 0xF8, 0x74, 0x72, 0xBF, 0x68, 0xF5, 0x52, 0xAC, 0xE6, 0x26,
        0x4D, 0x7F, 0x2B, 0x56, 0x82, 0x45, 0x4F, 0xA9, 0x24, 0xB9, 0xF3, 0xE9, 0xE4, 0x5B, 0x9B, 0xCC,
        0xA2, 0x67, 0x63, 0xF5, 0x85, 0xA4, 0xE9, 0xF6, 0x22, 0xD1, 0x2B, 0xC1, 0xA2, 0xC7, 0xDD, 0xB5,
        0x31, 0xF9, 0x87, 0xA7, 0xCD, 0xA1, 0x47, 0x34, 0x7D, 0x35, 0x69, 0xBA, 0x45, 0xA9, 0x04, 0x8B,
        0xDE, 0xF4, 0xDD, 0xCD, 0xC9, 0x17, 0x9F, 0x30, 0x87, 0x93, 0xD2, 0xFC, 0xAD, 0x64, 0xD0, 0x3C,
        0xB1, 0x12, 0x2C, 0xFA, 0xC2, 0x9A, 0x9D, 0xC9, 0xAC, 0x55, 0xE6, 0x70, 0x42, 0x86, 0xAE, 0x49,
        0x1A, 0xAE, 0x10, 0x2B, 0xC1, 0xA2, 0x2F, 0x6D, 0xDE, 0x97, 0x5C, 0xF2, 0x83, 0x64, 0xC3, 0x6E,
        0xB3, 0x78, 0x57, 0xEA, 0x3F, 0x9A, 0xB4, 0x3C, 0x7F, 0x69, 0xEA, 0x26, 0x8B, 0x95, 0x60, 0xD1,
        0x1F, 0xF6, 0x1F, 0x4E, 0xE6, 0xAD, 0x49, 0x16, 0x6D, 0x30, 0x8B, 0xDF, 0xAB, 0xE9, 0xEF, 0x93,
        0x21, 0x3F, 0x28, 0x52, 0x0C, 0x5B, 0x6D, 0x18, 0x82, 0x45, 0x3F, 0xAA, 0x24, 0x59, 0xB6, 0x25,
        0x99, 0xF1, 0xD3, 0x64, 0xEF, 0x41, 0xF3, 0x78, 0x8B, 0xA2, 0x2D, 0x19, 0xFA, 0xB3, 0x64, 0xD0,
        0x35, 0xFE, 0x25, 0x50, 0xB0, 0xA8, 0x26, 0xDB, 0xF6, 0x27, 0x97, 0xFF, 0xD0, 0x69, 0xEB, 0x2D,
        0xA7, 0xAA, 0x96, 0xFF, 0x2A, 0x52, 0x77, 0x8E, 0x52, 0x09, 0x16, 0xD5, 0xA8, 0xB3, 0xD2, 0x7D,
        0xDA, 0xBA, 0xFC, 0x87, 0xC9, 0xBF, 0xED, 0xA8, 0xD1, 0x21, 0x34, 0xFC, 0x51, 0xD2, 0xB2, 0xF1,
        0xD8, 0xA9, 0xCA, 0xFB, 0xB0, 0x0B, 0x16, 0x55, 0x6F, 0x77, 0x47, 0xF2, 0x57, 0xFF, 0x91, 0x5C,
        0xBD, 0x2A, 0xD9, 0xFC, 0xDB, 0x5A, 0xF9, 0xDB, 0x70, 0x5E, 0x32, 0xF4, 0xDF, 0x93, 0xE6, 0x25,
        0x45, 0x8A, 0xE1, 0x4E, 0x55, 0x82, 0x45, 0xD9, 0x3C, 0xBF, 0x2F, 0x99, 0xB5, 0x32, 0x69, 0x7F,
        0x34, 0xD9, 0x3A, 0x50, 0xC3, 0x55, 0x77, 0x6E, 0x32, 0xE4, 0x91, 0x64, 0xE8, 0xDA, 0x22, 0x75,
        0x1F, 0x14, 0x2A, 0xC1, 0xA2, 0xEC, 0x36, 0xFE, 0x26, 0x99, 0xB9, 0xB2, 0xFB, 0xDE, 0xAD, 0xB5,
        0xBB, 0x06, 0xCA, 0x4B, 0xBF, 0x69, 0xDD, 0xF7, 0x54, 0x0D, 0x5D, 0x57, 0xA4, 0xFE, 0x7C, 0xA1,
        0x2A, 0xC3, 0xCA, 0x8C, 0x80, 0xF7, 0x62, 0xF3, 0xBE, 0x64, 0xFE, 0xCF, 0x92, 0xD6, 0xC1, 0xC9,
        0xE5, 0xA3, 0x93, 0xBF, 0x98, 0x52, 0xC2, 0x6F, 0xA2, 0x69, 0x41, 0xD2, 0x78, 0xD5, 0x53, 0x29,
        0xDA, 0xCE, 0xB7, 0xD1, 0x72, 0x29, 0x2A, 0x95, 0x4A, 0x8F, 0x7C, 0xA1, 0x4D, 0x2D, 0x2D, 0x95,
        0x6A, 0xFD, 0x26, 0x3F, 0xB7, 0xB8, 0xD9, 0xA6, 0x7B, 0xEB, 0x88, 0x5E, 0x24, 0xE3, 0xDF, 0x97,
        0x7C, 0x7A, 0x6C, 0x32, 0x73, 0x62, 0x15, 0x3F, 0xD0, 0x41, 0x73, 0x93, 0xC6, 0xAB, 0x93, 0xBA,
        0x73, 0x0B, 0x2F, 0x2C, 0x04, 0x4B, 0xB0, 0x48, 0x5D, 0x91, 0x8C, 0x39, 0x25, 0xB9, 0xF0, 0xAC,
        0xE4, 0xAA, 0x09, 0xC9, 0x59, 0x43, 0xFA, 0xF3, 0xC1, 0x9C, 0x9D, 0x34, 0xB6, 0x27, 0x0D, 0x97,
        0x25, 0x75, 0xE3, 0x8B, 0xA4, 0xDE, 0x82, 0xBC, 0x24, 0x84, 0xDF, 0xE9, 0xAA, 0x74, 0xDF, 0xCB,
        0xB5, 0x6D, 0x7F, 0xF2, 0x9D, 0x5F, 0x25, 0xCD, 0x0D, 0xDD, 0x01, 0x9B, 0xF2, 0xFE, 0xE4, 0xC2,
        0x11, 0xC9, 0x05, 0x67, 0xF6, 0xE6, 0x95, 0x7C, 0x71, 0x52, 0x7F, 0x59, 0x52, 0x3F, 0x35, 0xA9,
        0x9B, 0x50, 0xA4, 0x18, 0x62, 0x21, 0x82, 0x05, 0xEF, 0x5E, 0xC7, 0xD1, 0x64, 0xD3, 0x6B, 0xDD,
        0xBF, 0x1E, 0xD8, 0xD2, 0x7D, 0x9F, 0xF8, 0xE0, 0x86, 0x64, 0x58, 0x53, 0x72, 0xE6, 0x90, 0x64,
        0xE4, 0xD0, 0xDF, 0xFD, 0x9A, 0x36, 0xEE, 0xA3, 0x49, 0xE5, 0x95, 0xA4, 0xF2, 0x5A, 0x52, 0x79,
        0x23, 0xC9, 0xD1, 0xEE, 0xCB, 0xB3, 0x18, 0x9A, 0x14, 0xC3, 0x92, 0xE2, 0xCC, 0xA4, 0x6E, 0x54,
        0x52, 0x8C, 0x4E, 0xEA, 0xC6, 0x26, 0x75, 0x63, 0x92, 0x62, 0x64, 0x52, 0x9C, 0x5E, 0xA4, 0x68,
        0x8E, 0xBB, 0xD0, 0x05, 0x0B, 0x7A, 0x54, 0xE5, 0x58, 0xC4, 0x3A, 0x8E, 0x26, 0xBB, 0xDE, 0x78,
        0xEB, 0x7F, 0xBA, 0x9E, 0xF6, 0xC1, 0x15, 0x8A, 0xC3, 0xF1, 0x5F, 0xE9, 0x1B, 0x01, 0x20, 0x58,
        0x00, 0x82, 0x05, 0x08, 0x16, 0x80, 0x60, 0x01, 0x08, 0x16, 0x20, 0x58, 0x00, 0x82, 0x05, 0x20,
        0x58, 0x80, 0x60, 0x01, 0x08, 0x16, 0x80, 0x60, 0x01, 0x82, 0x05, 0x20, 0x58, 0x00, 0x82, 0x05,
        0x08, 0x16, 0x80, 0x60, 0x01, 0x08, 0x16, 0x20, 0x58, 0x00, 0x82, 0x05, 0x20, 0x58, 0x80, 0x60,
        0x01, 0x08, 0x16, 0x80, 0x60, 0x01, 0x82, 0x05, 0x20, 0x58, 0x00, 0x82, 0x05, 0x08, 0x16, 0x80,
        0x60, 0x01, 0x82, 0x05, 0x20, 0x58, 0x00, 0x82, 0x05, 0x08, 0x16, 0x80, 0x60, 0x01, 0x08, 0x16,
        0x20, 0x58, 0x00, 0x82, 0x05, 0x20, 0x58, 0x80, 0x60, 0x01, 0x08, 0x16, 0x80, 0x60, 0x01, 0x82,
        0x05, 0x20, 0x58, 0x00, 0x82, 0x05, 0x08, 0x16, 0x40, 0xFF, 0x69, 0xE8, 0xA9, 0x2F, 0x34, 0xE9,
        0xC0, 0x81, 0xA2, 0x6A, 0xBF, 0xCB, 0x25, 0x6D, 0x15, 0xAB, 0x06, 0x27, 0x2C, 0x00, 0xC1, 0x02,
        0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0,
        0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40,
        0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B,
        0x40, 0xB0, 0x00, 0xC1, 0x02, 0xE8, 0x3F, 0x45, 0xA5, 0xE2, 0x33, 0x46, 0x01, 0x27, 0x2C, 0x00,
        0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x10, 0x2C,
        0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04,
        0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00,
        0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0,
        0x00, 0xC1, 0x02, 0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10,
        0x2C, 0x00, 0xC1, 0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0xC1, 0x02,
        0x10, 0x2C, 0x00, 0xC1, 0x02, 0x04, 0x0B, 0x40, 0xB0, 0x00, 0x04, 0x0B, 0x10, 0x2C, 0x00, 0xC1,
        0x02, 0x10, 0x2C, 0x40, 0xB0, 0x00, 0xFA, 0xC6, 0xFF, 0x00, 0xC7, 0xA8, 0xBB, 0x77, 0x9F, 0x89,
        0x81, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 
    };

    struct PNG
    {
        tin::data::ByteBuffer buffer;
        u64 width = 0;
        u64 height = 0;
        u64 rowBytes = 0;
    } m_png;

    void ReadPNGDataFromStream(png_structp pngReadStructPtr, png_bytep bytesOut, png_size_t length)
    {
        png_voidp ioPtr = png_get_io_ptr(pngReadStructPtr);

        if (ioPtr == NULL)
            return;

        tin::data::BufferedByteStream* stream = (tin::data::BufferedByteStream*)ioPtr;
        stream->ReadBytes(bytesOut, length);
    }

    void SetupPNGData()
    {
        // Check if this is a valid png
        bool validPNGSig = !png_sig_cmp(testPng, 0, 8);

        if (!validPNGSig)
        {
            LOG_DEBUG("Invalid PNG Sig!\n");
            return;
        }

        LOG_DEBUG("Valid PNG sig!\n");
    
        // Create the struct for reading the png
        png_structp pngReadStructPtr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    
        if (!pngReadStructPtr)
        {
            LOG_DEBUG("Failed to create PNG read struct!\n");
            return;
        }

        // Create the struct which holds png info
        png_infop pngInfoStructPtr = png_create_info_struct(pngReadStructPtr);

        if (!pngInfoStructPtr)
        {
            LOG_DEBUG("Failed to create PNG info struct!\n");
            png_destroy_read_struct(&pngReadStructPtr, NULL, NULL);
            return;
        }

        tin::data::ByteBuffer byteBuffer;
        byteBuffer.Resize(3118);
        memcpy(byteBuffer.GetData(), testPng, 3118);
        tin::data::BufferedByteStream bufferedByteStream(byteBuffer);

        png_set_read_fn(pngReadStructPtr, &bufferedByteStream, ReadPNGDataFromStream);

        // Setup error handling
        if (setjmp(png_jmpbuf(pngReadStructPtr)))
        {
            LOG_DEBUG("An error occurred during PNG parsing!\n");
            png_destroy_read_struct(&pngReadStructPtr, &pngInfoStructPtr, NULL);
            return;
        }

        LOG_DEBUG("Reading PNG...\n");

        // Read the entire PNG
        png_read_png(pngReadStructPtr, pngInfoStructPtr, 0, 0);

        // Retrieve the png height
        png_uint_32 height = png_get_image_height(pngReadStructPtr, pngInfoStructPtr);
        png_uint_32 width = png_get_image_width(pngReadStructPtr, pngInfoStructPtr);

        png_bytepp rows = png_get_rows(pngReadStructPtr, pngInfoStructPtr);
        png_uint_32 rowBytes = png_get_rowbytes(pngReadStructPtr, pngInfoStructPtr);

        m_png.width = width;
        m_png.height = height;
        m_png.rowBytes = rowBytes;

        for (png_uint_32 y = 0; y < height; y++)
        {
            png_bytep row = rows[y];

            for (png_uint_32 x = 0; x < rowBytes; x++)
            {
                png_byte pixel = row[x];

                m_png.buffer.Write<png_byte>(pixel, (y * rowBytes) + x);
            }
        }

        LOG_DEBUG("PNG Height: %u\n", height);

        // Delete the read struct
        png_destroy_read_struct(&pngReadStructPtr, &pngInfoStructPtr, NULL);
    }

    InstallView::InstallView()
    {
        auto backgroundLayer = std::make_unique<Layer>("background");
        auto foregroundLayer = std::make_unique<Layer>("foreground");

        // Background
        auto backgroundBox = std::make_unique<BoxElement>(1280, 720);
        backgroundBox->SetColour(tin::ui::Colour(0x394566));
        backgroundLayer->AddElement(std::move(backgroundBox), 0, 0);

        // Foreground
        auto sidebarBox = std::make_unique<BoxElement>(120, 720);
        sidebarBox->SetColour(tin::ui::Colour(0x2B334F));
        foregroundLayer->AddElement(std::move(sidebarBox), 0, 0);

        // Header
        auto headerBox = std::make_unique<BoxElement>(1280-120, 80);
        SubElementLayout headerSubElementLayout;
        headerSubElementLayout.arrangementType = SubElementArrangementType::LEFT_TO_RIGHT;
        headerBox->SetColour(tin::ui::Colour(0x556C91));
        headerBox->SetSubElementLayout(headerSubElementLayout);

        auto installApplicationText = std::make_unique<TextElement>(1280-120, 80);
        installApplicationText->SetText("Install Application");
        installApplicationText->SetScale(6);
        installApplicationText->SetInsets(25, 30);

        headerBox->AddSubElement(std::move(installApplicationText));
        foregroundLayer->AddElement(std::move(headerBox), 120, 0);

        // Game list
        // 720 - 80 - 3 to account for the header and to chop off the underline on the bottom row
        auto gameList = std::make_unique<ListElement>(625, 720 - 80 - 3);
        gameList->AddRow("Game 1");
        gameList->AddRow("Game 2");
        gameList->AddRow("Game 3");
        gameList->AddRow("Game 4");
        gameList->AddRow("Game 5");
        gameList->AddRow("Game 6");
        gameList->AddRow("Game 7");
        gameList->AddRow("Game 8");
        gameList->AddRow("Game 9");
        gameList->AddRow("Game 10");
        gameList->AddRow("Game 11");
        gameList->AddRow("Game 12");
        gameList->AddRow("Game 13");
        gameList->AddRow("Game 14");
        gameList->AddRow("Game 15");
        gameList->AddRow("Game 16");
        gameList->AddRow("Game 17");
        gameList->AddRow("Game 18");
        gameList->AddRow("Game 19");
        gameList->AddRow("Game 20");
        foregroundLayer->AddElement(std::move(gameList), 120+25, 80);

        this->AddLayer(std::move(backgroundLayer));
        this->AddLayer(std::move(foregroundLayer));

        SetupPNGData();
    }

    void InstallView::Update()
    {
        LayoutView::Update();

        Canvas canvas;

        for (unsigned int x = 0; x < m_png.width; x++)
        {
            for (unsigned int y = 0; y < m_png.height; y++)
            {
                tin::ui::Colour colour = m_png.buffer.Read<tin::ui::Colour>((y * m_png.rowBytes) + x * 4);
                canvas.DrawPixelBlend(x, y, colour);
            }
        }
    }
}